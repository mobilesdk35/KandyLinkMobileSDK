apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 29


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        archivesBaseName = "kandylinkmobilesdk"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

bintray {

    Properties properties = new Properties()
    def propertiesFile = project.rootProject.file('local.properties')
    println("EMNLOG propertiesFile: $propertiesFile")
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
    }

    println("EMNLOG user: $properties.getProperty('bintray_user_name')")
    user = properties.getProperty('bintray_user_name')
    key =  properties.getProperty('bintray_api_key')
    publications = ['customPublication']
    configurations = ['archives']
    pkg {
        repo = 'MobileSDK'
        def group = ext.apiKey = project.findProperty('group')
        name = group + '.kandylinkmobilesdk'
        desc = 'Kandy Link MobileSDK library'
        vcsUrl = 'https://github.com/mobilesdk35/KandyLinkMobileSDK.git'
        dryRun = false
        publish = true
        //publicDownloadNumbers = true
        version {
            def libraryVersion = ext.apiKey = project.findProperty('version')
            name = "$libraryVersion"
            desc = "Kandy Link MobileSDK $libraryVersion"
            released  = new Date()
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

project.afterEvaluate {
    publishing {


        publications {
            android.libraryVariants.all { variant ->
                println("EMNLOG,publications $variant.buildType.name")
                if (variant.buildType.name == "debug") return
            }

            customPublication(MavenPublication) {
                groupId = "$group"
                artifactId = 'kandylinkmobilesdk'
                version = "$version"

                artifact bundleReleaseAar
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.group.length() == 0 || dep.version == null || dep.name == null || dep.name == "unspecified"){
                            print("EMNLOG, ignoring unspecified dep.")
                            return // ignore invalid dependencies
                        }


                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    // List all "compile" dependencies (for old Gradle)
                    configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }

            }
        }


    }
}

